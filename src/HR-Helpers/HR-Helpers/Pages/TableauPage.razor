@page "/tableau/{IdTableau}"

@using HR_Helpers.ViewModels
@using AccessData.Models
@using HR_Helpers.Composants 

@inject ITableauViewModel ViewModel

<h3>Tableau</h3>

<AuthorizeView>
	<NotAuthorized>
		<div>Vous devez disposer d'un compte, où vous connecter.</div>
		<div><a href="/Identity/Account/Register">Inscription</a></div>
		<div><a href="/Identity/Account/Login">Connexion</a></div>
	</NotAuthorized>
	
	
	<Authorized>

	@if (ViewModel.TableauSelected != null)
	{
	<RadzenCard>
		<div>
			<div><u>Nom du tableau</u> : </div>
			<div>@ViewModel.TableauSelected.NomDuTableau</div>

			<div><u>Description</u> : </div>
			<div>@ViewModel.TableauSelected.Description</div>

			<div><u>Date de fin d'inscription</u> : </div>
			<div>@ViewModel.TableauSelected.DateFinInscription.ToString("d")</div>
		</div>

		<div class="row">
			<RadzenButton Text="Ajouter des valeurs"
						  ButtonStyle="ButtonStyle.Info"
						  Click="ViewModel.OpenDialog"
						  Disabled="ViewModel.IsOutDated"
						  Style="color: black" />

			@if (ViewModel.IsUserProprietaire)
				{
			<RadzenButton Text="Export en Excel"
						  class="hr-margin-5px-left"
						  ButtonStyle="ButtonStyle.Light"
						  Click="ViewModel.ExportToExcel" />

			<div style="float: right;">
				<RadzenButton Text="Supprimer le tableau"
							  class="hr-margin-5px-left"
							  ButtonStyle="ButtonStyle.Danger"
							  Click="ViewModel.DeleteTableau" />

			</div>
				}
		</div>
	</RadzenCard>

		//Affichage de la boite de dialog  pour ajouter une entrée
	<div>
		<CustomDialog Show="ViewModel.ShowNouvelleEntree">
			<div class="hr-margin-5px">
				<div>
					@foreach (var item in ViewModel.TableauSelected.Colonnes)
						{
					<div class="hr-margin-2px-top-bottom">

						@switch (item.TypeData)
								{
									case "number":
						<span>
							<u>@item.NomColonne</u> : <input type="number"
											   @onchange="@(e => ViewModel.OnChangeNumber(e, item.IdColonne))" />
							<span>@item.Description</span>
						</span>
										break;

									case "date":
						<span>
							<u>@item.NomColonne</u> : <input type="date"
											   @onchange="@(e => ViewModel.OnChangeDate(e, item.IdColonne))"
											   format-value="dd/MM/yyyy" />

							<span>@item.Description</span>
						</span>
										break;

									default:
						<span>
							<u>@item.NomColonne</u> : <input type="@item.TypeData" @bind-value="ViewModel.GetValueColonne(item.IdColonne).Value" />
							<span>@item.Description</span>
						</span>
										break;
								}
					</div>
						}
				</div>

				<div class="hr-margin-5px">
					<button @onclick="ViewModel.SaveAndNewData" class="hr-margin-5px-left">Enregistrer et nouvelle entrée</button>
					<button @onclick="ViewModel.SaveAndClose" class="hr-margin-5px-left">Enregistrer et Terminer</button>
					<button @onclick="ViewModel.OnCloseData" class="hr-margin-5px-left">Fermer</button>
				</div>
			</div>
		</CustomDialog>
	</div>

		// Tableau contenant toutes les entrées
	<div>
		<table class="table">
			<thead>
				<tr>
					<th style="width:85px;">
						<i>Options</i>
					</th>
					@foreach (var colonne in ViewModel.TableauSelected.Colonnes)
					{
						<th>@colonne.NomColonne</th>
					}
				</tr>
			</thead>

			<tbody>
				@foreach (var data in ViewModel.ToutesLesEntrees)
				{
				<tr>
					<td>
						<span>
							<RadzenButton Icon="edit"
										  Size="ButtonSize.Small"
										  Click="@(() => ViewModel.EditRow(data.FirstOrDefault().IdTableau,
																				data.FirstOrDefault().IdUser,
																				data.FirstOrDefault().NumeroLigne))" />

							<RadzenButton ButtonStyle="ButtonStyle.Danger"
										  Icon="close"
										  Size="ButtonSize.Small"
										  Click="@(() => ViewModel.DeleteRow(data.FirstOrDefault().IdTableau,
																				data.FirstOrDefault().IdUser,
																				data.FirstOrDefault().NumeroLigne))" />
						</span>
					</td>
					@foreach (var item in data)
					{
						<td>@item.Value</td>
					}
				</tr>
				}
			</tbody>
		</table>
	</div>

	}
	else
	{
	<div>Chargement des informations du tableau.</div>
	}

	</Authorized>
</AuthorizeView>

	@code {

		[Parameter]
		public string IdTableau { get; set; }

		protected async override Task OnParametersSetAsync()
		{
			await ViewModel.LoadTableau(IdTableau);
		}

		[CascadingParameter] public IModalService Modal { get; set; }
	}

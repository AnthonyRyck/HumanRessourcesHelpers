@using AccessData.Models

<div class="hr-margin-5px">
	<div>
		@foreach (var item in Colonnes)
		{
			<div class="hr-margin-2px-top-bottom">

				@switch (item.TypeData)
				{
					case "number":
						<span>
							<u>@item.NomColonne</u> : <input type="number"
												@bind-value="GetValueColonne(item.IdColonne).Value" />
						</span>
						break;

					case "date":
						<span>
							<u>@item.NomColonne</u> : <input type="date"
											   @onchange="@(e => OnChangeDate(e, item.IdColonne))"
											   format-value="dd/MM/yyyy" />
						</span>
						break;

					default:
						<span><u>@item.NomColonne</u> : <input type="@item.TypeData" @bind-value="GetValueColonne(item.IdColonne).Value" /> </span>
						break;
				}
			</div>
		}
	</div>

	<div class="hr-margin-5px">
		<button @onclick="SubmitForm" class="btn btn-primary">Sauvegarder</button>
		<button @onclick="Cancel" class="btn btn-secondary">Annuler</button>
	</div>
</div>


@code {

	[CascadingParameter]
	BlazoredModalInstance BlazoredModal { get; set; }

	[Parameter]
	public List<ColonneModel> Colonnes { get; set; }

	[Parameter]
	public List<ValueColonne> ValueColonnes { get; set; }

	async Task SubmitForm() => await BlazoredModal.CloseAsync(ModalResult.Ok(ValueColonnes));
	async Task Cancel() => await BlazoredModal.CancelAsync();

	private void OnChangeDate(ChangeEventArgs args, int idColonne)
	{
		var date = DateTime.Parse(args.Value.ToString()).ToString("d");
		GetValueColonne(idColonne).Value = date;
	}

	private ValueColonne GetValueColonne(int idColonne)
	{
		return ValueColonnes.FirstOrDefault(x => x.IdColonne == idColonne);
	}
}
